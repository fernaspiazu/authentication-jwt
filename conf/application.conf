# This is the main configuration file for the application.
# https://www.playframework.com/documentation/latest/ConfigFile
# ~~~~~
# Play uses HOCON as its configuration file format.  HOCON has a number
# of advantages over other config formats, but there are two things that
# can be used when modifying settings.
#
# You can include other configuration files in this main application.conf file:
# include "extra-config.conf"
#
# You can declare variables and substitute for them:
# mykey = ${some.value}
#
# And if an environment variable exists when there is no other subsitution, then
# HOCON will fall back to substituting environment variable:
# mykey = ${JAVA_HOME}

## Secret key
# http://www.playframework.com/documentation/latest/ApplicationSecret
# ~~~~~
# The secret key is used to sign Play's session cookie.
# This must be changed for production, but we don't recommend you change it in this file.
## JWT Tokens
# ~~~~~
# The secret key is used to secure cryptographics functions.
# We are using the same key to sign Json Web Tokens so you donâ€™t need to worry about it.
play.http.secret.key = "mH^i?0zNKUWcHupKtlOs8s0YNF^w_g=_8bAZ]pte0_[728D7a23<P<3?RMsSd1n8"


play.modules {
  enabled += controllers.AssetsModule
}

play.i18n {
  langs = [ "en", "it" ]
}

## Play HTTP settings
play.http {
  session {
    maxAge = 30000

    # Default: HS256
    # Supported: HMD5, HS1, HS224, HS256, HS384, HS512
    algorithm = "HS512"

    # Overrides response header name
    # Default: Authorization
    jwtResponseName = "JWT-Token"
  }
}

## Filter Configuration
play.filters {

  # Enabled filters are run automatically against Play.
  # CSRFFilter, AllowedHostFilters, and SecurityHeadersFilters are enabled by default.
  enabled += filters.ExampleFilter

  # Disabled filters remove elements from the enabled list.
  disabled += play.filters.csrf.CSRFFilter
}